INPUT=""
TEMP=""
OUTPUT=""

_usage="
Usage: $0 [OPTIONS]
Options:
  [ -i INPUT_DIR ],          Required. Absolute path to input files directory.
  [ -o OUTPUT_DIR ],         Optional. Absolute path to output files directory. Defualt as INPUT_DIR.
  [ -t TEMP_DIR ],           Optional. Absolute path to temporary files directory. Defualt as INPUT_DIR.
  [ -h ],                    Help manuals.
"

usage() {                                 # Function: Print a help message.
  echo "$_usage" 1>&2 
}

exit_abnormal() {                         # Function: Exit with error.
  usage
  exit 1
}

while getopts ":i:o:t:h" options; do         # use silent error checking;
                                          
  case "${options}" in                    
    i)                                    # If the option is i,
      INPUT=${OPTARG}                     # set $INPUT to specified value.
      ;;
    o)                                    # If the option is o,
      OUTPUT=${OPTARG}                    # set $OUTPUT to specified value.
      ;;
    t)                                    # If the option is t,
      TEMP=${OPTARG}                      # set $TEMP to specified value.
      ;;
    h)                                    # If the option is h,
      usage
      exit 0                      		    # print help manuals.
      ;;
    :)                                    # If expected argument omitted:
      echo "Error: -${OPTARG} requires an argument."
      exit_abnormal                       # Exit abnormally.
      ;;
    *)									  # If unknown (any other) option:
      echo "Error: Unknow option provided."                                    
      exit_abnormal                       # Exit abnormally.
      ;;
  esac
done


if [ "$INPUT" = "" ]; then                 # If $INPUT is an empty string,
  echo "Error: must provide INPUT_DIR."
  exit_abnormal                       
fi

if [ "$TEMP" = "" ]; then                  # If $TEMP is an empty string,
  TEMP=$INPUT                        
fi

if [ "$OUTPUT" = "" ]; then                # If $OUTPUT is an empty string,
  OUTPUT=$INPUT                       
fi

################
################
#Pipeline starts
################
################

########################
#Define input file paths
########################
ECLIP_RAW_1_1="${INPUT}/rep1.r1.fq"
ECLIP_RAW_1_2="${INPUT}/rep1.r2.fq"
ECLIP_RAW_2_1="${INPUT}/rep2.r1.fq"
ECLIP_RAW_2_2="${INPUT}/rep2.r2.fq"
REF_GENOME="${INPUT}/ref_genome.fasta"
GENOME_GTF="${INPUT}/genome_info.gtf"
REPBASE="{INPUT}/homo_sapiens_repbase.fasta"

#############
#Trim adapter
#############
##Rep1
#Round 1
TRIMMED1_1_1="${TEMP}/rep1.r1.fqTr.fq"
TRIMMED1_1_2="${TEMP}/rep1.r2.fqTr.fq"

# cutadapt \
# -f fastq \
# --match-read-wildcards \
# --times 1 \
# -e 0.1 \
# -O 1 \
# --quality-cutoff 6 \
# -m 18 \
# -a NNNNNAGATCGGAAGAGCACACGTCTGAACTCCAGTCAC \
# -g CTTCCGATCTACAAGTT \
# -g CTTCCGATCTTGGTCCT \
# -A AACTTGTAGATCGGA \
# -A AGGACCAAGATCGGA \
# -A ACTTGTAGATCGGAA \
# -A GGACCAAGATCGGAA \
# -A CTTGTAGATCGGAAG \
# -A GACCAAGATCGGAAG \
# -A TTGTAGATCGGAAGA \
# -A ACCAAGATCGGAAGA \
# -A TGTAGATCGGAAGAG \
# -A CCAAGATCGGAAGAG \
# -A GTAGATCGGAAGAGC \
# -A CAAGATCGGAAGAGC \
# -A TAGATCGGAAGAGCG \
# -A AAGATCGGAAGAGCG \
# -A AGATCGGAAGAGCGT \
# -A GATCGGAAGAGCGTC \
# -A ATCGGAAGAGCGTCG \
# -A TCGGAAGAGCGTCGT \
# -A CGGAAGAGCGTCGTG \
# -A GGAAGAGCGTCGTGT \
# -o "$TRIMMED1_1_1" \
# -p "$TRIMMED1_1_2" \
# "$ECLIP_RAW_1_1" \
# "$ECLIP_RAW_1_2"

#Round 2
TRIMMED2_1_1="${TEMP}/rep1.r1.fqTrTr.fq"
TRIMMED2_1_2="${TEMP}/rep1.r2.fqTrTr.fq"

# cutadapt \
# -f fastq \
# --match-read-wildcards \
# --times 1 \
# -e 0.1 \
# -O 5 \
# --quality-cutoff 6 \
# -m 18 \
# -A AACTTGTAGATCGGA \
# -A AGGACCAAGATCGGA \
# -A ACTTGTAGATCGGAA \
# -A GGACCAAGATCGGAA \
# -A CTTGTAGATCGGAAG \
# -A GACCAAGATCGGAAG \
# -A TTGTAGATCGGAAGA \
# -A ACCAAGATCGGAAGA \
# -A TGTAGATCGGAAGAG \
# -A CCAAGATCGGAAGAG \
# -A GTAGATCGGAAGAGC \
# -A CAAGATCGGAAGAGC \
# -A TAGATCGGAAGAGCG \
# -A AAGATCGGAAGAGCG \
# -A AGATCGGAAGAGCGT \
# -A GATCGGAAGAGCGTC \
# -A ATCGGAAGAGCGTCG \
# -A TCGGAAGAGCGTCGT \
# -A CGGAAGAGCGTCGTG \
# -A GGAAGAGCGTCGTGT \
# -o "$TRIMMED2_1_1" \
# -p "$TRIMMED2_1_2" \
# "$TRIMMED1_1_1" \
# "$TRIMMED1_1_2"

##Rep2
#Round 1
TRIMMED1_2_1="${TEMP}/rep2.r1.fqTr.fq"
TRIMMED1_2_2="${TEMP}/rep2.r2.fqTr.fq"

# cutadapt \
# -f fastq \
# --match-read-wildcards \
# --times 1 \
# -e 0.1 \
# -O 1 \
# --quality-cutoff 6 \
# -m 18 \
# -a NNNNNAGATCGGAAGAGCACACGTCTGAACTCCAGTCAC \
# -g CTTCCGATCTACAAGTT \
# -g CTTCCGATCTTGGTCCT \
# -A AACTTGTAGATCGGA \
# -A AGGACCAAGATCGGA \
# -A ACTTGTAGATCGGAA \
# -A GGACCAAGATCGGAA \
# -A CTTGTAGATCGGAAG \
# -A GACCAAGATCGGAAG \
# -A TTGTAGATCGGAAGA \
# -A ACCAAGATCGGAAGA \
# -A TGTAGATCGGAAGAG \
# -A CCAAGATCGGAAGAG \
# -A GTAGATCGGAAGAGC \
# -A CAAGATCGGAAGAGC \
# -A TAGATCGGAAGAGCG \
# -A AAGATCGGAAGAGCG \
# -A AGATCGGAAGAGCGT \
# -A GATCGGAAGAGCGTC \
# -A ATCGGAAGAGCGTCG \
# -A TCGGAAGAGCGTCGT \
# -A CGGAAGAGCGTCGTG \
# -A GGAAGAGCGTCGTGT \
# -o "$TRIMMED1_2_1" \
# -p "$TRIMMED1_2_2" \
# "$ECLIP_RAW_2_1" \
# "$ECLIP_RAW_2_2"

#Round 2
TRIMMED2_2_1="${TEMP}/rep2.r1.fqTrTr.fq"
TRIMMED2_2_2="${TEMP}/rep2.r2.fqTrTr.fq"

# cutadapt \
# -f fastq \
# --match-read-wildcards \
# --times 1 \
# -e 0.1 \
# -O 5 \
# --quality-cutoff 6 \
# -m 18 \
# -A AACTTGTAGATCGGA \
# -A AGGACCAAGATCGGA \
# -A ACTTGTAGATCGGAA \
# -A GGACCAAGATCGGAA \
# -A CTTGTAGATCGGAAG \
# -A GACCAAGATCGGAAG \
# -A TTGTAGATCGGAAGA \
# -A ACCAAGATCGGAAGA \
# -A TGTAGATCGGAAGAG \
# -A CCAAGATCGGAAGAG \
# -A GTAGATCGGAAGAGC \
# -A CAAGATCGGAAGAGC \
# -A TAGATCGGAAGAGCG \
# -A AAGATCGGAAGAGCG \
# -A AGATCGGAAGAGCGT \
# -A GATCGGAAGAGCGTC \
# -A ATCGGAAGAGCGTCG \
# -A TCGGAAGAGCGTCGT \
# -A CGGAAGAGCGTCGTG \
# -A GGAAGAGCGTCGTGT \
# -o "$TRIMMED2_2_1" \
# -p "$TRIMMED2_2_2" \
# "$TRIMMED1_2_1" \
# "$TRIMMED1_2_2"


###########################
#Remove repetitive elements
###########################
#Generate the repeat index
# cd $TEMP
# mkdir repeat_index
REPEAT_INDEX_DIR="${TEMP}/repeat_index"

# STAR \
# --runThreadN 8 \
# --runMode genomeGenerate \
# --genomeSAindexNbases 9 \
# --genomeDir "$REPEAT_INDEX_DIR" \
# --genomeFastaFiles "$REF_GENOME"

#Rep1
UNIQUE_1_1="${TEMP}/rep1.r1.fqTrTr.sorted.STAR"

# STAR \
# --runMode alignReads \
# --runThreadN 8 \
# --genomeDir "$REPEAT_INDEX_DIR" \
# --genomeLoad NoSharedMemory \
# --alignEndsType EndToEnd \
# --outSAMunmapped Within \
# --outFilterMultimapNmax 30 \
# --outFilterMultimapScoreRange 1 \
# --outFileNamePrefix "$UNIQUE_1_1" \
# --outSAMtype BAM Unsorted \
# --outFilterType BySJout \
# --outBAMcompression 10 \
# --outReadsUnmapped Fastx \
# --outFilterScoreMin 10 \
# --outSAMattrRGline ID:foo \
# --outSAMattributes All \
# --outSAMmode Full \
# --outStd Log \
# --readFilesIn "$TRIMMED2_1_1" "$TRIMMED2_1_2"

#Rep2
UNIQUE_2_1="${TEMP}/rep2.r1.fqTrTr.sorted.STAR"

# STAR \
# --runMode alignReads \
# --runThreadN 8 \
# --genomeDir "$REPEAT_INDEX_DIR" \
# --genomeLoad NoSharedMemory \
# --alignEndsType EndToEnd \
# --outSAMunmapped Within \
# --outFilterMultimapNmax 30 \
# --outFilterMultimapScoreRange 1 \
# --outFileNamePrefix "$UNIQUE_2_1" \
# --outSAMtype BAM Unsorted \
# --outFilterType BySJout \
# --outBAMcompression 10 \
# --outReadsUnmapped Fastx \
# --outFilterScoreMin 10 \
# --outSAMattrRGline ID:foo \
# --outSAMattributes All \
# --outSAMmode Full \
# --outStd Log \
# --readFilesIn "$TRIMMED2_2_1" "$TRIMMED2_2_2"


##############################
#Map non-repeats to the genome
##############################
# cd $TEMP
# mkdir genome_index
GENOME_INDEX_DIR="${TEMP}/genome_index"

#Generate index 
# STAR \
# --runThreadN 8 \
# --runMode genomeGenerate \
# --genomeDir "$GENOME_INDEX_DIR" \
# --sjdbGTFfile "$GENOME_GTF" \
# --genomeFastaFiles "$REF_GENOME" \
# --sjdbOverhang 99

##Rep1
UNMAP_1_1="${UNIQUE_1_1}Unmapped.out.mate1"
UNMAP_1_2="${UNIQUE_1_1}Unmapped.out.mate2"
ALIGNED_1_1="${TEMP}/rep1.r1.fq.genome-mapped"

# STAR \
# --runMode alignReads \
# --runThreadN 8 \
# --genomeDir "$GENOME_INDEX_DIR" \
# --genomeLoad NoSharedMemory \
# --readFilesIn \
# ${UNMAP_1_1} \
# ${UNMAP_1_2} \
# --outSAMunmapped Within \
# --outFilterMultimapNmax 1 \
# --outFilterMultimapScoreRange 1 \
# --outFileNamePrefix "$ALIGNED_1_1" \
# --outSAMattributes All \
# --outSAMtype BAM Unsorted \
# --outFilterType BySJout \
# --outReadsUnmapped Fastx \
# --outFilterScoreMin 10 \
# --outSAMattrRGline ID:foo \
# --outStd Log \
# --alignEndsType EndToEnd \
# --outBAMcompression 10 \
# --outSAMmode Full

##Rep2
UNMAP_2_1="${UNIQUE_2_1}Unmapped.out.mate1"
UNMAP_2_2="${UNIQUE_2_1}Unmapped.out.mate2"
ALIGNED_2_1="${TEMP}/rep2.r1.fq.genome-mapped"

# STAR \
# --runMode alignReads \
# --runThreadN 8 \
# --genomeDir "$GENOME_INDEX_DIR" \
# --genomeLoad NoSharedMemory \
# --readFilesIn \
# ${UNMAP_2_1} \
# ${UNMAP_2_2} \
# --outSAMunmapped Within \
# --outFilterMultimapNmax 1 \
# --outFilterMultimapScoreRange 1 \
# --outFileNamePrefix "$ALIGNED_2_1" \
# --outSAMattributes All \
# --outSAMtype BAM Unsorted \
# --outFilterType BySJout \
# --outReadsUnmapped Fastx \
# --outFilterScoreMin 10 \
# --outSAMattrRGline ID:foo \
# --outStd Log \
# --alignEndsType EndToEnd \
# --outBAMcompression 10 \
# --outSAMmode Full


###############
#Name sort BAM
###############
#Sort output from STAR by name to ensure read pairs are adjacent.
##Rep1
MAPPED_1="${ALIGNED_1_1}Aligned.out.bam"
MAPPED_1_SO="${ALIGNED_1_1}Aligned.outSO.bam"

# samtools \
# sort \
# -n \
# -o "$MAPPED_1_SO" \
# "$MAPPED_1"

##Rep2
MAPPED_2="${ALIGNED_2_1}Aligned.out.bam"
MAPPED_2_SO="${ALIGNED_2_1}Aligned.outSO.bam"

samtools \
sort \
-n \
-o "$MAPPED_2_SO" \
"$MAPPED_2"

######################
#Remove PCR duplicates
######################
##Rep1
RMDUP_1_BAM="${ALIGNED_1_1}SO.rmDup.bam"
RMDUP_1_MET="${ALIGNED_1_1}SO.rmDup.metrics"

# python barcodecollapsepe.py \
# -o "$RMDUP_1_BAM" \
# -m "$RMDUP_1_MET" \
# -b "$MAPPED_1_SO"

##Rep2
RMDUP_2_BAM="${ALIGNED_2_1}SO.rmDup.bam"
RMDUP_2_MET="${ALIGNED_2_1}SO.rmDup.metrics"

# python barcodecollapsepe.py \
# -o "$RMDUP_2_BAM" \
# -m "$RMDUP_2_MET" \
# -b "$MAPPED_2_SO"


########################
#Sort resulting bam file
########################
##Rep1
RMDUP_SO_1="${ALIGNED_1_1}SO.rmDupSO.bam"
# samtools sort -o "$RMDUP_SO_1" "$RMDUP_1_BAM"
##Rep2
RMDUP_SO_2="${ALIGNED_2_1}SO.rmDupSO.bam"
# samtools sort -o "$RMDUP_SO_2" "$RMDUP_2_BAM"

#################
#Merge replicates
#################
MERGED="${TEMP}/pe_clip.fq.merged.bam"
samtools merge "$MERGED" "$RMDUP_SO_1" "$RMDUP_SO_2"


############
#Call peaks
############

exit 0                                     # Exit normally.